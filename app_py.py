# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lh7e-otyNf8Sd1SYTh89U76lQt5eUI8_
"""

from flask import Flask, request, jsonify
import pandas as pd

# Initialize Flask app
app = Flask(__name__)

# Define the scoring logic
def calculate_financial_score(data):
    score = 100
    # Penalize low Savings-to-Income Ratio
    if data["Savings_to_Income_Ratio"] < 0.2:
        score -= 20
    elif data["Savings_to_Income_Ratio"] < 0.5:
        score -= 10

    # Penalize high Monthly Expenses as Percentage of Income
    if data["Expenses_Percentage"] > 0.8:
        score -= 25
    elif data["Expenses_Percentage"] > 0.5:
        score -= 15

    # Penalize high Loan Payments as Percentage of Income
    if data["Loan_Payments_Percentage"] > 0.4:
        score -= 20
    elif data["Loan_Payments_Percentage"] > 0.2:
        score -= 10

    # Penalize excessive spending in discretionary categories
    if data.get("Travel", 0) / data["Income"] > 0.1:
        score -= 10
    if data.get("Entertainment", 0) / data["Income"] > 0.1:
        score -= 10

    # Reward for achieving financial goals
    if data["Financial Goals Met (%)"] > 80:
        score += 10
    elif data["Financial Goals Met (%)"] > 50:
        score += 5

    return max(0, score)  # Ensure score is not negative

# API route for scoring
@app.route('/score', methods=['POST'])
def score():
    try:
        # Parse JSON input
        input_data = request.json

        # Convert input data to DataFrame for feature calculations
        df = pd.DataFrame([input_data])

        # Feature engineering
        df["Savings_to_Income_Ratio"] = df["Savings"] / df["Income"]
        df["Expenses_Percentage"] = df["Monthly Expenses"] / df["Income"]
        df["Loan_Payments_Percentage"] = df["Loan Payments"] / df["Income"]

        # Calculate financial score
        financial_score = calculate_financial_score(df.iloc[0])

        # Return results
        insights = {
            "Financial Score": financial_score,
            "Insights": f"Savings-to-Income Ratio: {df.iloc[0]['Savings_to_Income_Ratio']:.2f}, "
                        f"Expenses Percentage: {df.iloc[0]['Expenses_Percentage']:.2f}, "
                        f"Loan Payments Percentage: {df.iloc[0]['Loan_Payments_Percentage']:.2f}"
        }
        return jsonify(insights)

    except Exception as e:
        return jsonify({"error": str(e)}), 400

# Run the app
if __name__ == '__main__':
    app.run(debug=True)